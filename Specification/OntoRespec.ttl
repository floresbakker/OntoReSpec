@prefix dct: <http://purl.org/dc/terms/>.
@prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>.
@prefix doc: <http://www.example.org/document/> .
@prefix function: <https://data.rijksfinancien.nl/html/model/function/>.
@prefix html: <https://data.rijksfinancien.nl/html/model/def/> .
@prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/> .
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix respec: <https://respec.org/model/> .
@prefix rule: <https://data.rijksfinancien.nl/html/model/rule/>.
@prefix shp: <https://data.rijksfinancien.nl/html/model/shp/>.
@prefix target: <https://data.rijksfinancien.nl/html/model/target/>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.

respec:introduction
	a owl:DatatypeProperty;
    rdfs:domain owl:Ontology;
    rdfs:range xsd:string;
    skos:definition 'Property that links a text, in which an ontology is presented and introduced to an audience, to that very ontology.'@en;
    skos:prefLabel 'has introduction'@en.

shp:Document
  a sh:NodeShape;
  sh:rule rule:Document;
  sh:targetClass respec:TemplateDocument.

rule:Document
  a sh:SPARQLRule;
  skos:prefLabel 'Document rule'@en;
  rdfs:comment 'The Document rule creates a document and attaches its structure.'@en ;
  sh:construct """
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 

construct {
  ?documentID
    a html:Document, respec:Document ;
    ?element ?childID .
    
} where {
  
  $this ?element ?child.
  ?child  a/ rdfs:subClassOf* dom:Element.
  
  # Create identifiers
  bind(iri(concat(str($this),'-instance')) as ?documentID)
  bind(iri(concat(str(?child),'-instance')) as ?childID)
  
}""".

shp:StaticElement
  a sh:NodeShape;
  sh:rule rule:StaticElement;
  sh:targetClass respec:StaticElement.
  
rule:StaticElement
  a sh:SPARQLRule;
  skos:prefLabel 'Static Element rule'@en;
  rdfs:comment 'The Static Element rule creates a unique element and attaches its structure.'@en ;
  sh:construct """
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 

construct {
  ?elementID
    a ?class ;
    rdfs:label ?label;
    html:fragment ?fragment;
    ?element ?childID ;
	?attribute ?attributeValue.
    
} where {
  $this a ?class.
  OPTIONAL {
        $this ?element ?child.
  ?child  a/ rdfs:subClassOf* dom:Element.}
  OPTIONAL {
  $this html:fragment ?fragment}
  OPTIONAL {
  $this rdfs:label ?label}
  OPTIONAL {
  $this ?attribute ?attributeValue.
  ?attribute rdfs:subPropertyOf html:attribute.
  }
  ?class rdfs:subClassOf* dom:Element.
  # Create identifiers
  bind(iri(concat(str($this),'-instance')) as ?elementID)
  bind(iri(concat(str(?child),'-instance')) as ?childID)
  
}""".

shp:OntologyMetadata
  a sh:NodeShape;
  sh:rule rule:Title, rule:Introduction, rule:Description, rule:Example, rule:NameSpace, rule:Abstract, rule:Version, rule:Classes, rule:ObjectProperties, rule:DatatypeProperties, rule:NodeShapes;
  sh:targetClass owl:Ontology.


rule:Title
  a sh:SPARQLRule;
  skos:prefLabel 'Title rule'@en;
  rdfs:comment 'The Title rule creates a title for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>

construct {
  ?titleTextElementID rdf:type html:TextElement;
  html:fragment ?ontologyTitle.
    
} where {
   {?titleTextElement a respec:TitleTextElement}
  optional
  {$this dc:title ?ontologyTitle1}
  optional
  {$this dct:title ?ontologyTitle2}
  optional
  {$this schema:name ?ontologyTitle3}
   
  BIND(COALESCE(?ontologyTitle1, ?ontologyTitle2, ?ontologyTitle3, "Unknown title") as ?ontologyTitle)
  # Create identifiers
  bind(iri(concat(str(?titleTextElement),'-instance')) as ?titleTextElementID)
    
}""".


rule:Introduction
  a sh:SPARQLRule;
  skos:prefLabel 'Introduction rule'@en;
  rdfs:comment 'The Introduction rule creates an introduction for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {
  ?introductionSectionInstance        rdf:type html:Section;
                                      rdf:_1 ?generalIntroductionH2;
                                      rdf:_2 ?generalIntroduction_text;
									  rdf:_3 ?introductionBackgroundSection;
                                      rdf:_4 ?introductionOntologySection;
									  rdf:_5 ?introductionAudienceSection;
                                      html:class "informative".
  ?generalIntroductionH2              rdf:type html:H2;
                                      rdf:_1 ?generalIntroduction_title.
  ?generalIntroduction_title          rdf:type html:TextElement;
                                      html:fragment "Introduction".
  ?generalIntroduction_text           rdf:type html:TextElement;
                                      html:fragment ?generalIntroduction.
  ?introductionBackgroundSection      rdf:type html:Section;
                                      rdf:_1 ?introductionBackgroundH2;
                                      rdf:_2 ?introductionBackground_text.
  ?introductionBackgroundH2           rdf:type html:H2;
                                      rdf:_1 ?introductionBackground_title.
  ?introductionBackground_title       rdf:type html:TextElement;
                                      html:fragment "Background".
  ?introductionBackground_text        rdf:type html:TextElement;
                                      html:fragment ?introductionBackground.	
  ?introductionOntologySection        rdf:type html:Section;
                                      rdf:_1 ?introductionOntologyH2;
                                      rdf:_2 ?introductionOntology_text.
  ?introductionOntologyH2             rdf:type html:H2;
                                      rdf:_1 ?introductionOntology_title.
  ?introductionOntology_title         rdf:type html:TextElement;
                                      html:fragment ?ontologyTitle.
  ?introductionOntology_text          rdf:type html:TextElement;
                                      html:fragment ?ontologyIntroduction.
  ?introductionAudienceSection        rdf:type html:Section;
                                      rdf:_1 ?introductionAudienceH2;
                                      rdf:_2 ?introductionAudience_text.
  ?introductionAudienceH2             rdf:type html:H2;
                                      rdf:_1 ?introductionAudience_title.
  ?introductionAudience_title         rdf:type html:TextElement;
                                      html:fragment "Audience".
  ?introductionAudience_text          rdf:type html:TextElement;
                                      html:fragment ?introductionAudience.
} where {
   {?introductionSection a respec:Introduction}
    optional
   {$this respec:introduction ?introduction}
   optional
   {$this respec:background ?background}
   optional
   {$this respec:ontologyIntroduction ?ontologyIntroduction}
   optional
   {$this respec:audience ?audience}
   optional
   {$this dc:title ?ontologyTitle1}
   optional
   {$this dct:title ?ontologyTitle2}
   optional
   {$this schema:name ?ontologyTitle3}
  
  BIND(COALESCE(?introduction, "Introduction not available") as ?generalIntroduction) 
  BIND(COALESCE(?background, "Background not available") as ?introductionBackground) 
  BIND(COALESCE(?ontologyTitle1, ?ontologyTitle2, ?ontologyTitle3, "Unknown title") as ?ontologyTitle)
  BIND(COALESCE(?audience, "Audience not available") as ?introductionAudience) 
  
  # Create identifiers
  bind(iri(concat(str(?introductionSection),'-instance')) as ?introductionSectionInstance)
  bind(iri(concat(str(?introductionSectionInstance),'-1')) as ?generalIntroductionH2 )
  bind(iri(concat(str(?introductionSectionInstance),'-2')) as ?generalIntroduction_text)
  bind(iri(concat(str(?generalIntroductionH2 ),'-1')) as ?generalIntroduction_title )
    
  bind(iri(concat(str(?introductionSectionInstance),'-3')) as ?introductionBackgroundSection )
  bind(iri(concat(str(?introductionBackgroundSection),'-1')) as ?introductionBackgroundH2)
  bind(iri(concat(str(?introductionBackgroundSection),'-2')) as ?introductionBackground_text)
  bind(iri(concat(str(?introductionBackgroundH2),'-1')) as ?introductionBackground_title)
  
  bind(iri(concat(str(?introductionSectionInstance),'-4')) as ?introductionOntologySection )
  bind(iri(concat(str(?introductionOntologySection),'-1')) as ?introductionOntologyH2)
  bind(iri(concat(str(?introductionOntologySection),'-2')) as ?introductionOntology_text)
  bind(iri(concat(str(?introductionOntologyH2),'-1')) as ?introductionOntology_title)
  
  bind(iri(concat(str(?introductionSectionInstance),'-5')) as ?introductionAudienceSection )
  bind(iri(concat(str(?introductionAudienceSection),'-1')) as ?introductionAudienceH2)
  bind(iri(concat(str(?introductionAudienceSection),'-2')) as ?introductionAudience_text)
  bind(iri(concat(str(?introductionAudienceH2),'-1')) as ?introductionAudience_title)
  
}""".

rule:Description
  a sh:SPARQLRule;
  skos:prefLabel 'Description rule'@en;
  rdfs:comment 'The Description rule creates a description for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {
  ?descriptionTextElementID rdf:type html:TextElement;
  html:fragment ?ontologyDescription.
    
} where {
   {?textElement a respec:Description}
  optional
  {$this dc:description ?ontologyDescription1}
  optional
  {$this dct:description ?ontologyDescription2}
  optional
  {$this rdfs:comment ?ontologyDescription3}
  optional
  {$this schema:description ?ontologyDescription4}
  optional
  {$this skos:note ?ontologyDescription5}

  BIND(COALESCE(?ontologyDescription1, ?ontologyDescription2, ?ontologyDescription3, ?ontologyDescription4, ?ontologyDescription5,"Description not available") as ?ontologyDescription)
  # Create identifiers
  bind(iri(concat(str(?textElement),'-instance')) as ?descriptionTextElementID)
    
}""".

rule:Example
  a sh:SPARQLRule;
  skos:prefLabel 'Example rule'@en;
  rdfs:comment 'The Example rule creates an example for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {
  ?exampleElementAside   rdf:type html:Aside;
                         html:class 'example';
                         rdf:_1 ?exampleParagraph.
  ?exampleParagraph      rdf:type html:P;
                         rdf:_1 ?examplePre.
  ?examplePre            rdf:type html:Pre;
                         rdf:_1 ?exampleTextElement.
  ?exampleTextElement    rdf:type html:TextElement;
                         html:fragment ?ontologyExample.
} where {
  
  ?exampleElement a respec:Example.
  $this skos:example ?example.
  BIND(function:escapeHTML(?example) as ?ontologyExample)
  
  # Create identifiers
  BIND(IRI(CONCAT(STR(?exampleElement),'-instance')) as ?exampleElementAside)
  BIND(IRI(CONCAT(STR(?exampleElementAside), '-1')) as ?exampleParagraph)
  BIND(IRI(CONCAT(STR(?exampleParagraph),'-1')) as ?examplePre)
  BIND(IRI(CONCAT(STR(?examplePre),'-1')) as ?exampleTextElement)
    
}""".

rule:NameSpace
  a sh:SPARQLRule;
  skos:prefLabel 'Namespace rule'@en;
  rdfs:comment 'The Namespace rule creates a namespace declaration for the ontology in the document.'@en ;
  sh:construct """
prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix doc: <http://www.example.org/document/> 
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/> 
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix rule: <https://data.rijksfinancien.nl/html/model/rule/>
prefix shp: <https://data.rijksfinancien.nl/html/model/shp/>
prefix target: <https://data.rijksfinancien.nl/html/model/target/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix status: <http://purl.org/adms/status/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
construct {
  ?namespaceTableBodyInstance       ?rdf_member ?namespaceTableDataRow.
  ?namespaceTableDataRow            rdf:type html:Row;
                                    rdf:_1 ?namespacePrefixDataCell;
                                    rdf:_2 ?namespaceIRIDataCell.
  ?namespacePrefixDataCell          rdf:type html:DataCell;
                                    rdf:_1 ?namespacePrefixDataCell_text.
  ?namespacePrefixDataCell_text     rdf:type html:TextElement;
                                    html:fragment ?IRI_prefix.
  ?namespaceIRIDataCell             rdf:type html:DataCell;
                                    rdf:_1 ?namespaceIRIDataCell_text.
  ?namespaceIRIDataCell_text        rdf:type html:TextElement;
                                    html:fragment ?IRI_base.							
  ?namespaceDefinitionDataCell      rdf:type html:DataCell;
                                    rdf:_1 ?namespaceDefinitionDataCell_text.
} where {
  ?nameSpaceTableBody a respec:NameSpace.
  {
    SELECT ?ontology ?IRI_prefix ?IRI_base (COUNT(?prevOntology) + 2 AS ?rowmember) WHERE {
      {
        VALUES (?ontology ?IRI_base ?IRI_prefix) {
          (dcm: "http://purl.org/dc/dcmitype/" "dcm")
          (dct: "http://purl.org/dc/terms/" "dct")
          (foaf: "http://xmlns.com/foaf/0.1/" "foaf")
          (owl: "http://www.w3.org/2002/07/owl#" "owl")
          (prov: "http://www.w3.org/ns/prov#" "prov")
          (rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#" "rdf")
          (rdfs: "http://www.w3.org/2000/01/rdf-schema#" "rdfs")
          (sh: "http://www.w3.org/ns/shacl#" "sh")
          (skos: "http://www.w3.org/2004/02/skos/core#" "skos")
          (status: "http://purl.org/adms/status/" "status")
          (vann: "http://purl.org/vocab/vann/" "vann")
          (void: "http://rdfs.org/ns/void#" "void")
          (xsd: "http://www.w3.org/2001/XMLSchema#" "xsd")
        }
      }
      UNION 
      {
        ?ontology vann:preferredNamespaceUri ?IRI_base;
                  vann:preferredNamespacePrefix ?IRI_prefix.
      }
      OPTIONAL {
        {
          VALUES (?prevOntology ?prevIRI_prefix) {
            (dcm:  "dcm")
            (dct:  "dct")
            (foaf: "foaf")
            (owl:  "owl")
            (prov: "prov")
            (rdf:  "rdf")
            (rdfs: "rdfs")
            (sh: "sh")
            (skos: "skos")
            (status: "status")
            (vann: "vann")
            (void: "void")
            (xsd: "xsd")
          }
        }
        UNION 
        {
          ?prevOntology vann:preferredNamespacePrefix ?prevIRI_prefix.
        }
        FILTER (?prevIRI_prefix < ?IRI_prefix)
      }
    }
    GROUP BY ?ontology ?IRI_prefix ?IRI_base
  }
  BIND(IRI(CONCAT(str(rdf:),"_", str(?rowmember))) as ?rdf_member) 
  # Create identifiers
  BIND(IRI(CONCAT(STR(?nameSpaceTableBody),'-instance'))                  as ?namespaceTableBodyInstance)
  BIND(IRI(CONCAT(STR(?namespaceTableBodyInstance), '-',STR(?rowmember))) as ?namespaceTableDataRow)
  BIND(IRI(CONCAT(STR(?namespaceTableDataRow),'-1'))                      as ?namespacePrefixDataCell)
  BIND(IRI(CONCAT(STR(?namespaceTableDataRow),'-2'))                      as ?namespaceIRIDataCell)
  BIND(IRI(CONCAT(STR(?namespacePrefixDataCell),'-1'))                    as ?namespacePrefixDataCell_text)
  BIND(IRI(CONCAT(STR(?namespaceIRIDataCell),'-1'))                       as ?namespaceIRIDataCell_text)
}
""".

rule:Abstract
  a sh:SPARQLRule;
  skos:prefLabel 'Abstract rule'@en;
  rdfs:comment 'The Abstract rule creates an abstract for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 

construct {
  ?abstractTextElementID rdf:type html:TextElement;
  html:fragment ?ontologyAbstract.
    
} where {
   {?textElement a respec:Abstract}
  optional
  {$this dc:abstract ?ontologyAbstract1}
  optional
  {$this dct:abstract ?ontologyAbstract2}
  BIND(COALESCE(?ontologyAbstract1, ?ontologyAbstract2, "Abstract not available") as ?ontologyAbstract)
  # Create identifiers
  bind(iri(concat(str(?textElement),'-instance')) as ?abstractTextElementID)
    
}""".       
    

rule:Version
  a sh:SPARQLRule;
  skos:prefLabel 'Version rule'@en;
  rdfs:comment 'The Version rule creates the version information for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>

construct {
  
  ?configurationElementID rdf:type html:TextElement;
  html:fragment ?fragment4.
    
} where {
  
  ?textElement a respec:Configuration;
               html:fragment ?fragment.
  optional
  {$this owl:versionIRI ?ontologyVersion1}
  optional
  {$this schema:schemaVersion ?ontologyVersion2}
  optional
  {$this owl:versionInfo ?ontologyVersionText1}
  optional
  {$this dct:publisher ?workinggroup}
  optional
  {$this dct:source ?github}
  { select (group_concat(?ontologyAuthorString;separator='') as ?ontologyAuthors) 
    {
  optional
  {$this dct:creator ?ontologyAuthor1}
  optional
  {$this dc:creator ?ontologyAuthor2}
  optional
  {$this schema:creator ?ontologyAuthor3}
  optional
  {$this prov:wasAttributedTo ?ontologyAuthor4}

  BIND(COALESCE(?ontologyAuthor1, ?ontologyAuthor2, ?ontologyAuthor3, ?ontologyAuthor4, "Author unknown") as ?ontologyAuthor)
  BIND(CONCAT('{name: "', STR(?ontologyAuthor), '"},') as ?ontologyAuthorString)
    }
  }
  
  BIND(COALESCE(?ontologyVersion1, ?ontologyVersion2, "Version IRI not available") as ?ontologyVersionIRI)
  BIND(REPLACE(?fragment, 'VersionURL', str(?ontologyVersionIRI)) as ?fragment1)
  BIND(REPLACE(?fragment1, 'working-group', str(?workinggroup)) as ?fragment2)
  BIND(REPLACE(?fragment2, 'some-org/mySpec', str(?github)) as ?fragment3)
  BIND(REPLACE(?fragment3, 'name: "Your Name"', str(?ontologyAuthors)) as ?fragment4)
  
  # Create identifiers
  bind(iri(concat(str(?textElement),'-instance')) as ?configurationElementID)
  
}""".  



rule:Classes
  a sh:SPARQLRule;
  skos:prefLabel 'Classes rule'@en;
  rdfs:comment 'The Classes rule creates a section of classes for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix vann: <http://purl.org/vocab/vann/>

construct {

      ?divDefinitionClass1Instance            rdf:type html:Div;
                                              ?memberClassString ?divDefinitionClass2Instance.
      ?divDefinitionClass2Instance            rdf:type html:Section;
                                              rdf:_1 ?class_title_instance_h2;
											  rdf:_2 ?class_IRI_p;
											  rdf:_3 ?class_linebreak_instance1; 
                                              rdf:_4 ?class_definition_instance;
                                              rdf:_5 ?class_linebreak_instance2;  
                                              rdf:_6 ?class_linebreak_instance3;
                                              rdf:_7 ?manchester_syntax_instance.
      ?class_title_instance_h2                rdf:type html:H2;
                                              rdf:_1 ?class_dfn_instance.
      ?class_dfn_instance                     rdf:type html:Dfn;
                                              rdf:_1 ?class_title_text_instance.
      ?class_title_text_instance              rdf:type html:TextElement;
                                              html:fragment ?cleanedManchesterLabel.
	  ?class_IRI_p                    		  rdf:type html:P;
                                              rdf:_1 ?class_IRI_strong;
											  rdf:_2 ?class_IRI_a.
      ?class_IRI_strong                       rdf:type html:Strong;
                                              rdf:_1 ?class_IRI_text.
      ?class_IRI_text                         rdf:type html:TextElement;
                                              html:fragment 'IRI: '.
      ?class_IRI_a                            rdf:type html:A;
                                              html:href ?IRI_href;
                                              rdf:_1 ?IRI_value.
      ?IRI_value                              rdf:type html:TextElement;
                                              html:fragment ?IRI_value_text.	  
      ?class_definition_instance              rdf:type html:TextElement;
                                              html:fragment ?classDefinition.
      ?manchester_syntax_instance             rdf:type html:Aside;
                                              html:class "note" ;
                                              html:title "Manchester Syntax";
                                              rdf:_1 ?manchester_code_label_instance;
                                              rdf:_2 ?manchester_code_definition_instance.
      ?manchester_code_label_instance         rdf:type html:Code;
                                              rdf:_1 ?manchester_label_link;
                                              rdf:_2 ?colon.
      ?manchester_code_definition_instance    rdf:type html:Code;
                                              ?memberManchesterString  ?manchester_definition_block.
      ?manchester_label_link                  rdf:type html:A;
                                              rdf:_1 ?manchester_label_instance.
      ?colon                                  rdf:type html:TextElement;
                                              html:fragment ":".
      ?manchester_label_instance              rdf:type html:TextElement;
                                              html:fragment ?cleanedManchesterLabel.
      ?manchester_definition_block            rdf:type html:P;
                                              rdf:_1 ?manchester_definition_instance;
                                              rdf:_2 ?class_linebreak_instance4.
      ?manchester_definition_instance         rdf:type html:TextElement;
                                              html:fragment ?manchesterDefinition.
      ?class_linebreak_instance1              rdf:type html:Br.
	  ?class_linebreak_instance2              rdf:type html:Br.
      ?class_linebreak_instance3              rdf:type html:Br.
	  ?class_linebreak_instance4              rdf:type html:Br.
}
where  {
   
   # Get the template 
   
   {?divDefinitionClass1 rdf:type respec:ClassDefinition.

   }

   # Get the class from the ontology, the label and description, and the sequence order in which the class appears amidst other classes alphanumerically.
   
   {SELECT ?class ?manchesterLabel ?classDefinition_original (COUNT(?prevClass) + 1 AS ?memberClass)
    WHERE {
      ?class a owl:Class .
      ?class skos:definition ?classDefinition_original.
      ?class manchester:label ?manchesterLabel.
      
    OPTIONAL {
    ?prevClass a owl:Class .
    ?prevClass manchester:label ?prevLabel .
    FILTER(?prevLabel < ?manchesterLabel)
     }
    }
    GROUP BY ?class ?manchesterLabel ?classDefinition
    ORDER BY ?manchesterLabel # order alphanumerically so that the class definitions appear in the correct order
   }
   
   # Establishing the IRI, base IRI and relative IRI of the class
   
   OPTIONAL{
   $this vann:preferredNamespaceUri ?IRI_base;
         vann:preferredNamespacePrefix ?IRI_prefix.}
   BIND(STR(?class) as ?IRI_href)
   BIND(STRAFTER(STR(?class), ?IRI_base) as ?IRI_reference)
   BIND(COALESCE(CONCAT(STR(?IRI_prefix),":",?IRI_reference), ?IRI_href) as ?IRI_value_text) 
   
   BIND(IRI(CONCAT(str(rdf:),"_", str(?memberClass))) as ?memberClassString) 
   BIND(function:escapeHTML(concat(str(?manchesterLabel), ': ')) as ?manchesterLabelColon)
   BIND(function:escapeHTML(?classDefinition_original) as ?classDefinition)

   {SELECT ?class ?manchesterDefinition (COUNT(?prevManchesterDefinition) + 1 AS ?memberManchester)
    WHERE {
      ?class a owl:Class .
      ?class manchester:definition ?manchesterDefinition.  
    OPTIONAL {
      ?class manchester:definition ?prevManchesterDefinition .
    FILTER(?prevManchesterDefinition < ?manchesterDefinition)
    }
   }
   GROUP BY ?class ?manchesterDefinition
   ORDER BY ?manchesterDefinition # order alphanumerically so that the class definitions appear in the correct order
   }
  
  BIND(IRI(CONCAT(str(rdf:),"_", str(?memberManchester))) as ?memberManchesterString) #this is the rdf:_x property that indicates the order in which the manchester definition appears
  BIND(function:escapeHTML(?manchesterLabel) as ?cleanedManchesterLabel)
  
  # Create identifiers - generic
  
  bind(IRI(CONCAT(STR(?divDefinitionClass1),'-instance')) as ?divDefinitionClass1Instance)
  bind(IRI(CONCAT(STR(?divDefinitionClass1Instance), '-', str(?memberClass),'-1')) as ?divDefinitionClass2Instance)
  bind(IRI(CONCAT(STR(?divDefinitionClass2Instance), '-1')) as ?class_title_instance_h2)
  bind(IRI(CONCAT(STR(?divDefinitionClass2Instance), '-2')) as ?class_IRI_p)
  bind(IRI(CONCAT(STR(?divDefinitionClass2Instance), '-3')) as ?class_linebreak_instance1)
  bind(IRI(CONCAT(STR(?divDefinitionClass2Instance), '-4')) as ?class_definition_instance)
  bind(IRI(CONCAT(STR(?divDefinitionClass2Instance), '-5')) as ?class_linebreak_instance2)
  bind(IRI(CONCAT(STR(?divDefinitionClass2Instance), '-6')) as ?class_linebreak_instance3)
  bind(IRI(CONCAT(STR(?divDefinitionClass2Instance), '-7')) as ?manchester_syntax_instance)
  bind(IRI(CONCAT(STR(?class_IRI_p), '-1')) as ?class_IRI_strong)
  bind(IRI(CONCAT(STR(?class_IRI_p), '-2')) as ?class_IRI_a)
  bind(IRI(CONCAT(STR(?class_IRI_strong), '-1')) as ?class_IRI_text)
  bind(IRI(CONCAT(STR(?class_IRI_a), '-1')) as ?IRI_value)
  bind(IRI(CONCAT(STR(?class_title_instance_h2), '-1')) as ?class_dfn_instance)
  bind(IRI(CONCAT(STR(?class_dfn_instance), '-1')) as ?class_title_text_instance)
    
  # Create identifiers - Manchester Syntax 

  bind(IRI(CONCAT(STR(?manchester_syntax_instance), '-1')) as ?manchester_code_label_instance)  
  bind(IRI(CONCAT(STR(?manchester_syntax_instance), '-2')) as ?manchester_code_definition_instance)  
  bind(IRI(CONCAT(STR(?manchester_code_label_instance), '-1')) as ?manchester_label_link)
  bind(IRI(CONCAT(STR(?manchester_code_label_instance), '-2')) as ?colon)
  bind(IRI(CONCAT(STR(?manchester_label_link), '-1')) as ?manchester_label_instance)
  bind(IRI(CONCAT(STR(?manchester_code_definition_instance), '-',str(?memberManchester))) as ?manchester_definition_block)
  bind(IRI(CONCAT(STR(?manchester_definition_block), '-1')) as ?manchester_definition_instance)
  bind(IRI(CONCAT(STR(?manchester_definition_block), '-2')) as ?class_linebreak_instance3)
  
}
""".

rule:ObjectProperties
  a sh:SPARQLRule;
  skos:prefLabel 'Object properties rule'@en;
  rdfs:comment 'The object properties rule creates a section of object properties for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix vann: <http://purl.org/vocab/vann/>

construct {

      ?divDefinitionObjectProperty1Instance rdf:type html:Div;
                                            ?memberObjectPropertyString ?divDefinitionObjectProperty2Instance;
											html:fragment ?absenceOfObjectPropertyDefinitions.
      ?divDefinitionObjectProperty2Instance rdf:type html:Section;
                                   rdf:_1 ?objectProperty_title_instance_h2;
                                   rdf:_2 ?objectProperty_definition_instance.
      ?objectProperty_title_instance_h2     rdf:type html:H2;
                                   ?memberTitle ?objectProperty_dfn_instance.
      ?objectProperty_dfn_instance          rdf:type html:Dfn;
                                   ?memberDfn ?objectProperty_title_text_instance.
      ?objectProperty_title_text_instance   rdf:type html:TextElement;
                                   html:fragment ?objectPropertyLabel2.
      ?objectProperty_definition_instance   rdf:type html:TextElement;
                                   html:fragment ?objectPropertyDefinition.
    
}
where  {
   {?sectionDefinition rdf:type html:Section;
                       ?member ?divDefinitionObjectProperty1.
    ?divDefinitionObjectProperty1 rdf:type respec:ObjectPropertyDefinitionDiv;
                       ?memberDiv ?divDefinitionObjectProperty2.
    ?divDefinitionObjectProperty2 rdf:type respec:ObjectPropertyDefinitionInstance;
                        rdf:_1 ?H2_class_title;
                        rdf:_2 ?P_class_definition.
    ?H2_class_title a respec:ObjectProperty;
                        ?memberTitle ?objectProperty_dfn.
    ?objectProperty_dfn rdf:type respec:ObjectPropertyDfn;
                        ?memberDfn ?objectProperty_title.
    ?objectProperty_title        rdf:type respec:ObjectPropertyTitle.
    ?P_class_definition rdf:type respec:ObjectProperty;
                        ?memberText ?objectProperty_definition_text.
    ?objectProperty_definition_text a respec:ObjectPropertyDefinitionText.
  }
   
   {SELECT ?objectProperty ?objectPropertyLabel ?objectPropertyDefinition (COUNT(?prevObjectProperty) + 1 AS ?memberObjectProperty)
WHERE {
  ?objectProperty a owl:ObjectProperty .
  ?objectProperty skos:prefLabel ?objectPropertyLabel .
  ?objectProperty skos:definition ?objectPropertyDefinition_original.
  BIND(function:escapeHTML(?objectPropertyDefinition_original) as ?objectPropertyDefinition)
  OPTIONAL {
    ?prevObjectProperty a owl:ObjectProperty .
    ?prevObjectProperty skos:prefLabel ?prevLabel .
    FILTER(?prevLabel < ?objectPropertyLabel)
  }
}
  GROUP BY ?objectPropertyLabel ?objectProperty ?objectPropertyDefinition
  ORDER BY ?objectPropertyLabel
}
  BIND(IRI(CONCAT(str(rdf:),"_", str(?memberObjectProperty))) as ?memberObjectPropertyString)
  BIND(IF(!BOUND(?objectProperty), "This ontology does not define any object property.", ?unboundDummy) as ?absenceOfObjectPropertyDefinitions)
  
  # Create identifiers
  
  BIND(COALESCE(?objectPropertyLabel, "Unknown class label") as ?objectPropertyLabel2)
  BIND(IRI(CONCAT(STR(?sectionDefinition), '-instance')) as ?sectionDefinitionInstance)
  BIND(IRI(CONCAT(STR(?divDefinitionObjectProperty1),'-instance')) as ?divDefinitionObjectProperty1Instance)
  BIND(IRI(CONCAT(STR(?divDefinitionObjectProperty2), '-', str(?memberObjectProperty),'-instance')) as ?divDefinitionObjectProperty2Instance)
  BIND(IRI(CONCAT(STR(?objectProperty_title), '-', str(?memberObjectProperty), '-instance')) as ?objectProperty_title_text_instance)
  BIND(IRI(CONCAT(STR(?H2_class_title), '-', str(?memberObjectProperty), '-instance')) as ?objectProperty_title_instance_h2)
  BIND(IRI(CONCAT(STR(?objectProperty_definition_text), '-', str(?memberObjectProperty), '-instance')) as ?objectProperty_definition_instance)
  BIND(IRI(CONCAT(STR(?objectProperty_dfn), '-', str(?memberObjectProperty), '-instance')) as ?objectProperty_dfn_instance)
  
}
""".

rule:DatatypeProperties
  a sh:SPARQLRule;
  skos:prefLabel 'Datatype properties rule'@en;
  rdfs:comment 'The datatype properties rule creates a section of datatype properties for the ontology in the document.'@en ;
  sh:construct """
prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix manchester: <https://data.rijksfinancien.nl/manchester/model/def/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix vann: <http://purl.org/vocab/vann/>

construct {

      ?datatypeproperty_div                   rdf:type html:Div;
                                              ?rdf_member ?datatypeproperty_section.
      ?datatypeproperty_section               rdf:type html:Section;
                                              rdf:_1 ?datatypeproperty_H2_title;
											  rdf:_2 ?datatypeproperty_IRI_p;
											  rdf:_3 ?linebreak1;
                                              rdf:_4 ?datatypeproperty_definition;
                                              rdf:_5 ?linebreak2;  
                                              rdf:_6 ?linebreak3;
                                              rdf:_7 ?manchester_syntax.
      ?datatypeproperty_H2_title              rdf:type html:H2;
                                              rdf:_1 ?datatypeproperty_dfn.
      ?datatypeproperty_dfn                   rdf:type html:Dfn;
                                              rdf:_1 ?datatypeproperty_title.
      ?datatypeproperty_title                 rdf:type html:TextElement;
                                              html:fragment ?datatypePropertyLabel_text.
      ?datatypeproperty_IRI_p                 rdf:type html:P;
                                              rdf:_1 ?datatypeproperty_IRI_strong;
											  rdf:_2 ?datatypeproperty_IRI_a.
      ?datatypeproperty_IRI_strong            rdf:type html:Strong;
                                              rdf:_1 ?datatypeproperty_IRI_text.
      ?datatypeproperty_IRI_text              rdf:type html:TextElement;
                                              html:fragment 'IRI: '.
      ?datatypeproperty_IRI_a                 rdf:type html:A;
                                              html:href ?datatypeProperty;
                                              rdf:_1 ?IRI_value.
      ?IRI_value                              rdf:type html:TextElement;
                                              html:fragment ?prefixedIRI.	  
      ?datatypeproperty_definition            rdf:type html:TextElement;
                                              html:fragment ?datatypePropertyDefinition_text.
      ?manchester_syntax                      rdf:type html:Aside;
                                              html:class "note" ;
                                              html:title "Manchester Syntax";
                                              rdf:_1 ?manchester_code_label;
                                              rdf:_2 ?manchester_code_domain;
											  rdf:_3 ?manchester_code_range;
											  rdf:_4 ?manchester_code_subpropertyof.
      ?manchester_code_label                  rdf:type html:Code;
                                              rdf:_1 ?manchester_label.
      ?manchester_code_domain                 rdf:type html:Code;
                                              rdf:_1  ?manchester_domain_paragraph.
      ?manchester_label                       rdf:type html:TextElement;
                                              html:fragment ?datatypePropertyManchesterLabel.
      ?manchester_domain_paragraph            rdf:type html:P;
                                              rdf:_1 ?manchester_domain;
                                              rdf:_2 ?linebreak4.
      ?manchester_domain                      rdf:type html:TextElement;
                                              html:fragment ?datatypePropertyManchesterDomain.
      ?manchester_code_range                  rdf:type html:Code;
                                              rdf:_1  ?manchester_range_paragraph.
      ?manchester_range_paragraph             rdf:type html:P;
                                              rdf:_1 ?manchester_range;
                                              rdf:_2 ?linebreak5.
      ?manchester_range                       rdf:type html:TextElement;
                                              html:fragment ?datatypePropertyManchesterRange.
      ?manchester_code_subpropertyof          rdf:type html:Code;
                                              rdf:_1  ?manchester_subpropertyof_paragraph.
      ?manchester_subpropertyof_paragraph     rdf:type html:P;
                                              rdf:_1 ?manchester_subpropertyof;
                                              rdf:_2 ?linebreak6.
      ?manchester_subpropertyof               rdf:type html:TextElement;
                                              html:fragment ?datatypePropertyManchesterSubPropertyOf.											  
	  ?linebreak1                             rdf:type html:Br.
      ?linebreak2                             rdf:type html:Br.
	  ?linebreak3                             rdf:type html:Br.
	  ?linebreak4                             rdf:type html:Br.
	  ?linebreak5                             rdf:type html:Br.
	  ?linebreak6                             rdf:type html:Br.
}
where  {
   {?datatypeproperty_Template rdf:type respec:DatatypeProperty.}
   
   {SELECT ?datatypeProperty ?datatypePropertyLabel ?datatypePropertyManchesterLabel ?datatypePropertyManchesterDomain ?datatypePropertyManchesterRange ?datatypePropertyManchesterSubPropertyOf ?datatypePropertyDefinition_text (COUNT(?prevDatatypeProperty) + 1 AS ?member)
WHERE {
  ?datatypeProperty a owl:DatatypeProperty .
  ?datatypeProperty manchester:label ?datatypePropertyLabel .
  ?datatypeProperty skos:definition ?datatypePropertyDefinition_original.
  ?datatypeProperty manchester:datatypeProperty ?datatypePropertyManchesterLabel.
  
  OPTIONAL{
  ?datatypeProperty manchester:domain ?datatypePropertyManchesterDomain_original.}
  OPTIONAL{
  ?datatypeProperty manchester:range ?datatypePropertyManchesterRange_original.}
  OPTIONAL{
  ?datatypeProperty manchester:subPropertyOf ?datatypePropertyManchesterSubPropertyOf_original.}
  
  BIND(function:escapeHTML(?datatypePropertyDefinition_original) as ?datatypePropertyDefinition_text)
  BIND(function:escapeHTML(?datatypePropertyManchesterDomain_original) as ?datatypePropertyManchesterDomain)
  BIND(function:escapeHTML(?datatypePropertyManchesterRange_original) as ?datatypePropertyManchesterRange)
  BIND(function:escapeHTML(?datatypePropertyManchesterSubPropertyOf_original) as ?datatypePropertyManchesterSubPropertyOf)
  
  OPTIONAL {
    ?prevDatatypeProperty a owl:DatatypeProperty .
    ?prevDatatypeProperty manchester:label ?prevLabel .
    FILTER(?prevLabel < ?datatypePropertyLabel)
  }
}
  GROUP BY ?datatypePropertyLabel ?datatypeProperty ?datatypePropertyDefinition ?datatypePropertyManchesterLabel ?datatypePropertyManchesterDomain ?datatypePropertyManchesterRange ?datatypePropertyManchesterSubPropertyOf ?datatypePropertyDefinition_text 
  ORDER BY ?datatypePropertyLabel
}
  BIND(IRI(CONCAT(str(rdf:),"_", str(?member))) as ?rdf_member)  
  BIND(COALESCE(?datatypePropertyLabel, "Unknown class label") as ?datatypePropertyLabel_text)

  # Establishing the prefixed IRI of the datatype property.
  
  BIND(function:getPrefixedIRI(?datatypeProperty) as ?prefixedIRI)

  # Create identifiers
  
  BIND(IRI(CONCAT(STR(?datatypeproperty_Template),'-instance'))                   as ?datatypeproperty_div)
  BIND(IRI(CONCAT(STR(?datatypeproperty_div), '-', str(?member)))                 as ?datatypeproperty_section)
  BIND(IRI(CONCAT(STR(?datatypeproperty_section), '-1'))                          as ?datatypeproperty_H2_title) 
  BIND(IRI(CONCAT(STR(?datatypeproperty_H2_title), '-1'))                         as ?datatypeproperty_dfn)
  BIND(IRI(CONCAT(STR(?datatypeproperty_dfn), '-1'))                              as ?datatypeproperty_title)
  BIND(IRI(CONCAT(STR(?datatypeproperty_section), '-2'))                          as ?datatypeproperty_IRI_p) 
  BIND(IRI(CONCAT(STR(?datatypeproperty_section), '-3'))                          as ?linebreak1)
  BIND(IRI(CONCAT(STR(?datatypeproperty_IRI_p), '-1'))                            as ?datatypeproperty_IRI_strong)
  BIND(IRI(CONCAT(STR(?datatypeproperty_IRI_p), '-2'))                            as ?datatypeproperty_IRI_a)
  BIND(IRI(CONCAT(STR(?datatypeproperty_IRI_strong), '-1'))                       as ?datatypeproperty_IRI_text)
  BIND(IRI(CONCAT(STR(?datatypeproperty_IRI_a), '-1'))                            as ?IRI_value)
  BIND(IRI(CONCAT(STR(?datatypeproperty_section), '-4'))                          as ?datatypeproperty_definition)
  BIND(IRI(CONCAT(STR(?datatypeproperty_section), '-5'))                          as ?linebreak2)
  BIND(IRI(CONCAT(STR(?datatypeproperty_section), '-6'))                          as ?linebreak3)
  BIND(IRI(CONCAT(STR(?datatypeproperty_section), '-7'))                          as ?manchester_syntax)

  # Create identifiers - Manchester Syntax 

  BIND(IRI(CONCAT(STR(?manchester_syntax), '-1'))           as ?manchester_code_label)  
  BIND(IF(BOUND(?datatypePropertyManchesterDomain),         IRI(CONCAT(STR(?manchester_syntax), '-2')), ?unboundDummy)           as ?manchester_code_domain)  
  BIND(IF(BOUND(?datatypePropertyManchesterRange),          IRI(CONCAT(STR(?manchester_syntax), '-3')), ?unboundDummy)            as ?manchester_code_range)
  BIND(IF(BOUND(?datatypePropertyManchesterSubPropertyOf),  IRI(CONCAT(STR(?manchester_syntax), '-4')), ?unboundDummy)           as ?manchester_code_subpropertyof)
  BIND(IRI(CONCAT(STR(?manchester_code_label), '-1'))       as ?manchester_label)
  BIND(IRI(CONCAT(STR(?manchester_code_domain), '-1'))      as ?manchester_domain_paragraph)
  BIND(IRI(CONCAT(STR(?manchester_domain_paragraph), '-1')) as ?manchester_domain)
  BIND(IRI(CONCAT(STR(?manchester_domain_paragraph), '-2')) as ?linebreak4)
  BIND(IRI(CONCAT(STR(?manchester_code_range), '-1'))       as ?manchester_range_paragraph)
  BIND(IRI(CONCAT(STR(?manchester_range_paragraph), '-1'))  as ?manchester_range)
  BIND(IRI(CONCAT(STR(?manchester_range_paragraph), '-2'))  as ?linebreak5)
  BIND(IRI(CONCAT(STR(?manchester_code_subpropertyof), '-1')) as ?manchester_subpropertyof_paragraph)
  BIND(IRI(CONCAT(STR(?manchester_subpropertyof_paragraph), '-1'))  as ?manchester_subpropertyof)
  BIND(IRI(CONCAT(STR(?manchester_subpropertyof_paragraph), '-2'))  as ?linebreak6)
}
""".

rule:NodeShapes
  a sh:SPARQLRule;
  skos:prefLabel 'Node shapes rule'@en;
  rdfs:comment 'The node shapes rule creates a section of node shapes for the ontology in the document.'@en ;
  sh:construct """

prefix dct: <http://purl.org/dc/terms/>
prefix dc:  <http://purl.org/dc/elements/1.1/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix function: <https://data.rijksfinancien.nl/html/model/function/>
prefix html: <https://data.rijksfinancien.nl/html/model/def/> 
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
prefix respec: <https://respec.org/model/> 
prefix schema: <http://schema.org/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>

construct {

      ?divDefinitionNodeShape1Instance rdf:type html:Div;
                                       ?memberNodeShapeString ?divDefinitionNodeShape2Instance.
      ?divDefinitionNodeShape2Instance rdf:type html:Section;
                                   rdf:_1 ?nodeShape_title_instance_h2;
                                   rdf:_2 ?nodeShape_definition_instance.
      ?nodeShape_title_instance_h2     rdf:type html:H2;
                                   ?memberTitle ?nodeShape_dfn_instance.
      ?nodeShape_dfn_instance          rdf:type html:Dfn;
                                   ?memberDfn ?nodeShape_title_text_instance.
      ?nodeShape_title_text_instance   rdf:type html:TextElement;
                                   html:fragment ?nodeShapeLabel2.
      ?nodeShape_definition_instance   rdf:type html:TextElement;
                                   html:fragment ?nodeShapeDefinition.
    
}
where  {
   {?sectionDefinition rdf:type html:Section;
                       ?member ?divDefinitionNodeShape1.
    ?divDefinitionNodeShape1 rdf:type respec:NodeShapeDefinitionDiv;
                       ?memberDiv ?divDefinitionNodeShape2.				   				  
    ?divDefinitionNodeShape2 rdf:type respec:NodeShapeDefinitionInstance;       
                        rdf:_1 ?H2_class_title;
                        rdf:_2 ?P_class_definition.
    ?H2_class_title a respec:NodeShape;
                        ?memberTitle ?nodeShape_dfn.
    ?nodeShape_dfn rdf:type respec:NodeShapeDfn;
                            ?memberDfn ?nodeShape_title.
    ?nodeShape_title        rdf:type respec:NodeShapeTitle.
    ?P_class_definition rdf:type respec:NodeShape;
                        ?memberText ?nodeShape_definition_text.
     ?nodeShape_definition_text a respec:NodeShapeDefinitionText.
  }
   
   {SELECT ?nodeShape ?nodeShapeLabel ?nodeShapeDefinition (COUNT(?prevNodeShape) + 1 AS ?memberNodeShape)
WHERE {
  ?nodeShape a sh:NodeShape .
  ?nodeShape skos:prefLabel ?nodeShapeLabel .
  OPTIONAL{
  ?nodeShape skos:definition ?nodeShapeDefinition_original.}
  BIND(function:escapeHTML(COALESCE(?nodeShapeDefinition_original, "No description available")) as ?nodeShapeDefinition)
  OPTIONAL {
    ?prevNodeShape a sh:NodeShape .
    ?prevNodeShape skos:prefLabel ?prevLabel .
    FILTER(?prevLabel < ?nodeShapeLabel)
  }
}
  GROUP BY ?nodeShapeLabel ?nodeShape ?nodeShapeDefinition
  ORDER BY ?nodeShapeLabel
}
  BIND (IRI(CONCAT(str(rdf:),"_", str(?memberNodeShape))) as ?memberNodeShapeString)

  # Create identifiers
  bind(COALESCE(?nodeShapeLabel, "Unknown class label") as ?nodeShapeLabel2)
  bind(IRI(CONCAT(STR(?sectionDefinition), '-instance')) as ?sectionDefinitionInstance)
  bind(IRI(CONCAT(STR(?divDefinitionNodeShape1),'-instance')) as ?divDefinitionNodeShape1Instance)
  bind(IRI(CONCAT(STR(?divDefinitionNodeShape2), '-', str(?memberNodeShape),'-instance')) as ?divDefinitionNodeShape2Instance)
  bind(IRI(CONCAT(STR(?nodeShape_title), '-', str(?memberNodeShape), '-instance')) as ?nodeShape_title_text_instance)
  bind(IRI(CONCAT(STR(?H2_class_title), '-', str(?memberNodeShape), '-instance')) as ?nodeShape_title_instance_h2)
  bind(IRI(CONCAT(STR(?nodeShape_definition_text), '-', str(?memberNodeShape), '-instance')) as ?nodeShape_definition_instance)
  bind(IRI(CONCAT(STR(?nodeShape_dfn), '-', str(?memberNodeShape), '-instance')) as ?nodeShape_dfn_instance)
  
}
""".

function:escapeHTML
    a sh:SPARQLFunction ;
    rdfs:comment "Escapes HTML characters in the input string." ;
    sh:parameter [
        sh:path function:input ;
        sh:datatype xsd:string ;
        sh:description "The input string to escape HTML characters from." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
       SELECT ?result WHERE {
       BIND(replace(
                    replace(
                        replace(
                            replace(
                                replace(
                                    $input,
                                    '&', '&amp;', 'g'),
                                '<', '&lt;', 'g'),
                            '>', '&gt;', 'g'),
                        '\"', '&quot;', 'g'),
                    "\'", '&apos;', 'g')
                AS ?result).
        }
        """ .
		
function:getPrefixedIRI
    a sh:SPARQLFunction ;
    rdfs:comment "Gets prefixed IRI from full IRI." ;
    sh:parameter [
        sh:path function:IRI ;
        sh:datatype xsd:anyURI ;
        sh:description "The full IRI of a RDF resource as defined in an ontology." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
       SELECT ?result WHERE {
{
    VALUES (?ontology ?IRI_base ?IRI_prefix) {
      (dcm: "http://purl.org/dc/dcmitype/" "dcm")
      (dct: "http://purl.org/dc/terms/" "dct")
      (foaf: "http://xmlns.com/foaf/0.1/" "foaf")
      (owl: "http://www.w3.org/2002/07/owl#" "owl")
      (prov: "http://www.w3.org/ns/prov#" "prov")
      (rdf: "http://www.w3.org/1999/02/22-rdf-syntax-ns#" "rdf")
      (rdfs: "http://www.w3.org/2000/01/rdf-schema#" "rdfs")
      (sh: "http://www.w3.org/ns/shacl#" "sh")
      (skos: "http://www.w3.org/2004/02/skos/core#" "skos")
      (status: "http://purl.org/adms/status/" "status")
      (vann: "http://purl.org/vocab/vann/" "vann")
      (void: "http://rdfs.org/ns/void#" "void")
      (xsd: "http://www.w3.org/2001/XMLSchema#" "xsd")
    }
  }
  UNION 
  {
    ?ontology vann:preferredNamespaceUri ?IRI_base;
              vann:preferredNamespacePrefix ?IRI_prefix.
  }
  FILTER (STRSTARTS(STR($IRI), ?IRI_base))
  BIND(STR($IRI) as ?IRI_href)
  BIND(STRAFTER(STR($IRI), ?IRI_base) as ?IRI_reference)
  BIND(COALESCE(CONCAT(STR(?IRI_prefix),":",?IRI_reference), ?IRI_href) as ?result)
}
        """ .